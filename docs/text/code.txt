Source Documentation
********************

======================================================================

   Description:
      Lookup query against TIDE active state and historic data
      producing basic report on whether there is active/historical
      data with simplified report output.

      For more extensive output for a specific IOC use tide-lookup.py

   Requirements:
      Requires ibtidelib, requests, tqdm

   Usage:
      simple_tide_report.py [options] <query>
         -h

         help

         -i

         <file> Input file (one IOC per line)

         -o

         <file> CSV Output file for results

         -b

         <file> File for reporting of bogus lines

         -k

         <key> TIDE apikey

         -a

         active threats only

         -l

         local database (activeonly)

         -d

         debug output

   Author: Chris Marrison

   Date Last Updated: 20190116

   Todo:
      * Option to treat URLs as hostnames i.e. parse URL to extract
        hostname

      * Considering adding option to do DNS lookup on hosts and TIDE
        lookups on returned CNAMEs and IPs, however, may need
        different data structure

Copyright 2019 Chris Marrison / Infoblox

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
“AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

======================================================================

simple_tide_report.checkactive(query, qtype, apikey)

   Check for active threat intel, parse and output results

   Parameters:
      * **query** (*str*) – hostname, ip, or url

      * **qtype** (*str*) – query type (host, ip, url)

      * **apikey** (*str*) – TIDE API key

   Returns:
      number of active threats Found profiles (list): TIDE Profiles
      tclasses (list): List of threat classes

   Return type:
      totalthreats (int)

simple_tide_report.checkoffline(query, qtype, db_cursor, db_table)

   Check for active threat intel using local database

   Parameters:
      * **query** (*str*) – hostname, ip, or url

      * **qtype** (*str*) – query type (host, ip, url)

      * **db_cursor** (*db.cursor*) – database cursor

      * **db_table** (*db.table*) – database table

   Returns:
      number of active threats Found profiles (list): TIDE Profiles
      tclasses (list): List of threat classes

   Return type:
      totalthreats (int)

simple_tide_report.checktide(query, qtype, apikey)

   Check against all threat intel data, parse and output results

   Parameters:
      * **query** (*str*) – hostname, ip, or url

      * **qtype** (*str*) – query type (host, ip, url)

      * **apikey** (*str*) – TIDE API key

   Returns:
      number of active threats Found profiles (list): TIDE Profiles
      tclasses (list): List of threat classes last_available
      (datetime): Most recent ‘available’ date if available
      last_expiration (datetime): Most recent ‘expiration’ date if
      available

   Return type:
      totalthreats (int)

simple_tide_report.gen_report(activethreats, totalthreats, filehandle)

   Generate Threat Report

   Parameters:
      * **activethreats** (*dict*) – Dictionary of active threat
        query data

      * **totalthreats** (*dict*) – Dictionary of all threat query
        data

      * **filehandle** (*fh** or **None*) – file handler or None

   Returns:
      Report to STDOUT and/or file No return data

simple_tide_report.getkeys(cc)

   Get keys from collections.Counter object

   Parameters:
      **cc** – collection.counter object

   Returns:
      List of keys in counter

   Return type:
      keys

simple_tide_report.main()

   ## Main ##

      Core logic when running as script

simple_tide_report.most_recent(t1, t2)

   Compare two datetime stamps and return most recent

   Parameters:
      * **t1** – timestamp

      * **t2** – timestamp

   Returns:
      most recent timestamp from t1,t2.

   Return type:
      mostrecent

simple_tide_report.open_file(filename)

   Attempt to open logfile

   Parameters:
      **filename** (*str*) – Name of file to open.

   Returns:
      file handler object.

simple_tide_report.output_bogus(data, file, line_number)

   Write invalid data to file

   Parameters:
      * **data** (*str*) – data to Write

      * **file** (*filehandle*) – file handler

      * **line_number** (*int*) – bogus line number

   Returns:
      no data.

simple_tide_report.output_counter(cc)

   Output all entries in a counter by value

   Parameters:
      **is a collection.Counter****(****) ****obj.** (*cc*) –

   Returns:
      No data.

simple_tide_report.parseargs()

   Parse Arguments Using argparse

   Parameters:
      **None** –

   Returns:
      Returns parsed arguments

simple_tide_report.setup_logging(debug)

   Set up logging

   Parameters:
      **debug** (*bool*) – True or False.

   Returns:
      None.
